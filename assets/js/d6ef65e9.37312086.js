"use strict";(self.webpackChunklemurian_adventure_guild=self.webpackChunklemurian_adventure_guild||[]).push([[728],{672:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>h});var a=r(5893),n=r(1151);const s={},i="The Goblin's Hoard",o={id:"Treasures/communal_magic_items",title:"The Goblin's Hoard",description:"Pitched as an idea by Trithagerous after the retrieval of the Decanter of Endless Water during The Poisoned Cistern, there is a communal collection of non-attunement magic items accessible to members of the guild depending on the needs of a mission. Though this item in particular is now lost after Bavazi was captured with it by a powerful necromancer.",source:"@site/archives/Treasures/communal_magic_items.md",sourceDirName:"Treasures",slug:"/Treasures/communal_magic_items",permalink:"/wiki/archives/Treasures/communal_magic_items",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tar'kiz Token",permalink:"/wiki/archives/Tarkiz_token"},next:{title:"Known Treasure",permalink:"/wiki/archives/Treasures/known_treasure"}},c={},h=[{value:"The Hero&#39;s Cookpot",id:"the-heros-cookpot",level:2},{value:"Amulet of Detect Thoughts",id:"amulet-of-detect-thoughts",level:2},{value:"Bart&#39;s Plague Tree Quarterstaff",id:"barts-plague-tree-quarterstaff",level:2}];function l(e){const t={a:"a",h1:"h1",h2:"h2",hr:"hr",img:"img",li:"li",p:"p",ul:"ul",...(0,n.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"the-goblins-hoard",children:"The Goblin's Hoard"}),"\n",(0,a.jsxs)(t.p,{children:["Pitched as an idea by ",(0,a.jsx)(t.a,{href:"../../npcs/guild/Trithagerous",children:"Trithagerous"})," after the retrieval of the ",(0,a.jsx)(t.a,{href:"https://www.dndbeyond.com/magic-items/4615-decanter-of-endless-water",children:"Decanter of Endless Water"})," during The Poisoned Cistern, there is a communal collection of non-attunement magic items accessible to members of the guild depending on the needs of a mission. Though this item in particular is now lost after Bavazi was captured with it by a powerful necromancer."]}),"\n",(0,a.jsx)(t.p,{children:"Checking out an item from the Goblin's Hoard requires 1 Time Unit (TU)."}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h2,{id:"the-heros-cookpot",children:"The Hero's Cookpot"}),"\n",(0,a.jsx)(t.p,{children:"When you cook a meal in this pot, it grants immunity to weather effects (damage from extreme heat or cold, movement penalties from rain, wind, or snow).\nIt requires 1 hour to cook and consume a meal in this pot and can feed up to 6 people.\nThe effects last for up to 4 hours."}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h2,{id:"amulet-of-detect-thoughts",children:"Amulet of Detect Thoughts"}),"\n",(0,a.jsx)(t.p,{children:"It gives the wearer the ability cast Detect Thoughts with 1d3 charges per long rest. It requires Attunement."}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h2,{id:"barts-plague-tree-quarterstaff",children:"Bart's Plague Tree Quarterstaff"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://www.dndbeyond.com/magic-items/7916944-plague-tree-quarterstaff",children:"Bart's staff"})," was carved and wielded by Bart the Stickmage from a Dead Head Tree's branches."]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Causes 1 Necrotic Damage to Weilder per Attack (hit or fail and multiattacks count as separate attacks)"}),"\n",(0,a.jsx)(t.li,{children:"+1d6 necrotic damage on top of the normal damage of a quarterstaff"}),"\n"]}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"corner with a comfy chair and a shelf of magical wondrous items",src:r(6373).Z+"",width:"512",height:"512"})})]})}function u(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},6373:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/the_goblin_hoard-f6a24fb6d7d22fa0ed127fffe27686d0.png"},1151:(e,t,r)=>{r.d(t,{Z:()=>o,a:()=>i});var a=r(7294);const n={},s=a.createContext(n);function i(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);